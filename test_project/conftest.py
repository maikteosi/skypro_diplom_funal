import os
import sys
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from dotenv import load_dotenv

project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

load_dotenv()


@pytest.fixture(scope="session")  # ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò –ù–ê "session"
def driver():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤"""

    chromedriver_path = r"C:\Users\–ú–∏—Ö–∞–∏–ª\Desktop\skypro_diplom_funal\skypro_diplom_funal\test_project\drivers\chromedriver.exe"
    chrome_binary_path = r"C:\Program Files\Google\Chrome\chrome-win32\chrome.exe"

    if not os.path.exists(chromedriver_path):
        pytest.fail(f"ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω: {chromedriver_path}")

    if not os.path.exists(chrome_binary_path):
        pytest.fail(f"–¢–µ—Å—Ç–æ–≤—ã–π Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: {chrome_binary_path}")

    driver_instance = None
    try:
        service = Service(chromedriver_path)

        options = Options()
        options.binary_location = chrome_binary_path

        # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ë–ï–ó –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ
        test_profile_dir = os.path.join(project_root, "chrome_test_profile")
        options.add_argument(f"--user-data-dir={test_profile_dir}")

        # –û–±—ã—á–Ω—ã–π User Agent
        options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/141.0.0.0 Safari/537.36")

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--start-maximized")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)

        # –†–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        prefs = {'profile.default_content_setting_values': {'images': 1}}
        options.add_experimental_option("prefs", prefs)

        print("üöÄ –ó–ê–ü–£–°–ö –ë–†–ê–£–ó–ï–†–ê –î–õ–Ø –í–°–ï–• –¢–ï–°–¢–û–í...")
        driver_instance = webdriver.Chrome(service=service, options=options)

        # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        driver_instance.execute_script("Object.defineProperty("
                                       "navigator, 'webdriver', {get: () => undefined})")

        driver_instance.implicitly_wait(10)
        driver_instance.set_page_load_timeout(30)

        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤!")

        yield driver_instance

        print("üîö –ó–ê–ö–†–´–¢–ò–ï –ë–†–ê–£–ó–ï–†–ê –ü–û–°–õ–ï –í–°–ï–• –¢–ï–°–¢–û–í...")
        driver_instance.quit()
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç!")

    except Exception as e:
        if driver_instance:
            driver_instance.quit()
        pytest.fail(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome: {e}")


@pytest.fixture(scope="session")
def api_config():
    return {
        "base_url": os.getenv("API_BASE_URL"),
        "api_key": os.getenv("API_KEY"),
        "headers": {
            "X-API-KEY": os.getenv("API_KEY"),
            "Content-Type": "application/json"
        }
    }
